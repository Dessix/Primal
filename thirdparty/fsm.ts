/*
 * Finite state machine library
 * Copyright (c) 2014-6 Steelbreeze Limited
 * Licensed under the MIT and GPL v3 licences
 * http://www.steelbreeze.net/state.cs
 */

/**
 * An enumeration used to dictate the behavior of instances of the [[PseudoState]] class.
 *
 * Use these constants as the `kind` parameter when creating new [[PseudoState]] instances to define their behavior (see the description of each member).
 */

export module FSM {
	export enum PseudoStateKind {
		/**
		 * Enables a dynamic conditional branches; within a compound [[Transition]].
		 *
		 * All outbound transition guards from a [[Choice]] [[PseudoState]] are evaluated upon entering the [[PseudoState]]:
		 * if a single [[Transition]] is found, it will be traversed;
		 * if many are found, an arbitary one will be selected and traversed;
		 * if none evaluate true, and there is no 'else transition' defined, the machine is deemed illformed and an exception will be thrown.
		 */
		Choice,

		/**
		 * As per [[ShallowHistory]], but the history semantic cascades through all child regions irrespective of their history semantics.
		 */
		DeepHistory,

		/**
		 * Defines the [[PseudoState]] that will be the initial staring point when entering its enclosing [[Region]].
		 */
		Initial,

		/**
		 * Enables a static conditional branches; within a compound [[Transition]].
		 * All outbound transition guards from a [[Junction]] [[PseudoState]] are evaluated upon entering the [[PseudoState]]:
		 * if a single [[Transition]] is found, it will be traversed;
		 * if many or none evaluate true, and there is no 'else transition' defined, the machine is deemed illformed and an exception will be thrown.
		 */
		Junction,

		/**
		 * Ensures that re-entry of the enclosing [[Region]] will start at the last known active state configuration.
		 *
		 */
		ShallowHistory,

		/**
		 * Entering a terminate [[PseudoState]] implies that the execution of [[StateMachine]] is terminated and will not respond to any more messages.
		 */
		Terminate
	}

	/**
	 * An enumeration of that dictates the precise behavior of a [[Transition]] instance.
	 *
	 * Use these constants as the `kind` parameter when creating new [[Transition]] instances to define their behavior (see the description of each member).
	 * @note Within the [[Transition]] constructor the `kind` parameter will be validated and adjusted as necessary.
	 */
	export enum TransitionKind {
		/**
		 * The [[Transition]], if triggered, will exit the source [[Vertex]] and enter the target [[Vertex]] irrespective of the proximity of source and terget in terms of their enclosing [[Region]].
		 */
		External,

		/**
		 * The [[Transition]], if triggered, occurs without exiting or entering the source [[State]];
		 * it does not cause a state therefore no [[State]] exit or entry [[Action]]s will be invoked, only [[Transition]] [[Action]]s.
		 */
		Internal,

		/**
		 * The [[Transition]], if triggered, will not exit the source [[State]] as the terget [[Vertex]] is a child of the source [[State]]. No exit [[Action]]s are invoked from the source [[State]], but [[Transition]] and entry [[Action]]s will be invoked as required.
		 */
		Local
	}

	/**
	 * An abstract class used as the base for the [[Region]] and [[Vertex]] classes.
	 * An element is a node within the tree structure that represents a state machine model.
	 */
	export abstract class Element {
		/**
		 * The symbol used to separate [[Element]] names within a [[qualifiedName]].
		 * Change this static member to create different styles of [[qualifiedName]] generated by the [[toString]] method.
		 */
		public static namespaceSeparator = ".";

		/**
		 * The name of the [[Element]].
		 */
		public /*readonly*/ name: string;

		/**
		 * Returns the [[Element]] [[name]] as a namespace delimited by [[namespaceSeparator]].
		 */
		public /*readonly*/ qualifiedName: string;

	/**
	 * Creates a new instance of the [[Element]] class.
	 * @param name The name of the element.
	 * @param parent The parent [[Element]] of this [[Element]]
	 */
	/*internal*/ constructor(name: string, parent: Element) {
			this.name = name;
			this.qualifiedName = parent ? (parent.qualifiedName + Element.namespaceSeparator + name) : name;
		}

		/**
		 * Returns the [[Element]] [[name]] as a namespace delimited by [[namespaceSeparator]].
		 */
		public toString(): string {
			return this.qualifiedName;
		}
	}

	/**
	 * An [[Element]] within a [[StateMachine]] model that is a container (parent) of [[Vertex]] instances; a [[Region]] will be the child of a composite [[State]].
	 *
	 * @note A [[Region]] is implicitly inserted into a composite [[State]] if not explicitly defined.
	 */
	export class Region extends Element {
		/**
		 * The name given to [[Region]]s implicitly created (when a [[State]] is passed to a [[Vertex]] constructor as it's parent.
		 */
		public static defaultName = "default";

		/**
		 * The parent [[State]] of this [[Region]].
		 */
		public /*readonly*/ state: State;

		/**
		 * The set of vertices that are children of the region.
		 */
		public vertices = new Array<Vertex>();

		/**
		 * Creates a new instance of the Region class.
		 * @param {string} name The name of the region.
		 * @param {State} state The parent state that this region will be a child of.
		 */
		public constructor(name: string, state: State) {
			super(name, state);

			this.state = state;

			this.state.regions.push(this);

			this.state.getRoot().clean = false;
		}

		/**
		 * Removes the state from the state machine model
		 */
		public remove() {
			for (let vertex of this.vertices) {
				vertex.remove();
			}

			this.state.regions.splice(this.state.regions.indexOf(this), 1);

			console.log(`remove ${this}`);

			this.state.getRoot().clean = false;
		}

		/**
		 * Returns the root element within the state machine model.
		 */
		public getRoot(): StateMachine {
			return this.state.getRoot();
		}

		/**
		 * Accepts an instance of a visitor and calls the visitRegion method on it.
		 * @param TArg1 The type of the first optional parameter.
		 * @param {Visitor<TArg1>} visitor The visitor instance.
		 * @param {TArg1} arg1 An optional argument to pass into the visitor.
		 * @param {any} arg2 An optional argument to pass into the visitor.
		 * @param {any} arg3 An optional argument to pass into the visitor.
		 */
		public accept<TArg1>(visitor: Visitor<TArg1>, arg1?: TArg1, arg2?: any, arg3?: any): any {
			return visitor.visitRegion(this, arg1, arg2, arg3);
		}
	}

	/**
	 * An abstract element within a state machine model that can be the source or target of a transition (states and pseudo states).
	 *
	 * Vertex extends the Element class and inherits its public interface.
	 */
	export abstract class Vertex extends Element {
		// resolve the vertices parent region for either states or regions
		private static parent(parent: Region | State): Region {
			return parent instanceof State ? parent.defaultRegion() : parent;
		}

		/**
		 * The parent region of this vertex.
		 */
		public /*readonly*/ region: Region;

		/**
		 * The set of transitions originating from this vertex.
		 */
		public outgoing = new Array<Transition>();

		/**
		 * The set of transitions targeting this vertex.
		 */
		public incoming = new Array<Transition>();

		/**
		 * Creates a new instance of the Vertex class.
		 * @param {string} name The name of the vertex.
		 * @param {Region | State} parent The parent region or state.
		 */
		public constructor(name: string, parent: Region | State) {
			super(name, State.parent(parent));

			this.region = State.parent(parent);

			if (this.region) {
				this.region.vertices.push(this);

				this.region.getRoot().clean = false;
			}
		}

		/**
		 * Returns the ancestry of a Vertex, form the root state machine to this vertex.
		 */
		public ancestry(): Array<Vertex> {
			return (this.region ? this.region.state.ancestry() : new Array<Vertex>()).concat(this);
		}

		/**
		 * Returns the root element within the state machine model.
		 */
		public getRoot(): StateMachine {
			return this.region.getRoot();
		}

		/**
		 * Removes the vertex from the state machine model
		 */
		public remove() {
			for (let transition of this.outgoing) {
				transition.remove();
			}

			for (let transition of this.incoming) {
				transition.remove();
			}

			this.region.vertices.splice(this.region.vertices.indexOf(this), 1);

			console.log(`remove ${this}`);

			this.region.getRoot().clean = false;
		}

		/**
		 * Creates a new transition from this vertex.
		 * Newly created transitions are completion transitions; they will be evaluated after a vertex has been entered if it is deemed to be complete.
		 * Transitions can be converted to be event triggered by adding a guard condition via the transitions `where` method.
		 * @param {Vertex} target The destination of the transition; omit for internal transitions.
		 * @param {TransitionKind} kind The kind the transition; use this to set Local or External (the default if omitted) transition semantics.
		 */
		public to(target?: Vertex, kind: TransitionKind = TransitionKind.External): Transition {
			return new Transition(this, target, kind);
		}

		/**
		 * Accepts an instance of a visitor.
		 * @param TArg1 The type of the first optional parameter.
		 * @param {Visitor<TArg1>} visitor The visitor instance.
		 * @param {TArg1} arg1 An optional argument to pass into the visitor.
		 * @param {any} arg2 An optional argument to pass into the visitor.
		 * @param {any} arg3 An optional argument to pass into the visitor.
		 */
		public abstract accept<TArg1>(visitor: Visitor<TArg1>, arg1?: TArg1, arg2?: any, arg3?: any): any;
	}

	/**
	 * An [[Element]] within a [[StateMachine]] model that represents an transitory [[Vertex]].
	 *
	 * [[PseudoState]]s are required in state machine models to define the default stating state of a [[Region]].
	 * [[PseudoState]]s are also used for defining history semantics or to facilitate more complex transitions.
	 * A [[Terminate]] [[PseudoState]] kind is also available to immediately terminate processing within the entire state machine instance.
	 */
	export class PseudoState extends Vertex {
		/**
		 * The kind of the [[PseudoState]] which determines its use and behavior.
		 */
		public /*readonly*/ kind: PseudoStateKind;

		/**
		 * Creates a new instance of the [[PseudoState]] class.
		 * @param {string} name The name of the [[PseudoState]].
		 * @param {Region | State} parent The parent [[Element]] that this [[PseudoState]] will be a child of.
		 * @param {PseudoStateKind} kind Determines the behavior of the [[PseudoState]].
		 */
		public constructor(name: string, parent: Region | State, kind: PseudoStateKind = PseudoStateKind.Initial) {
			super(name, parent);

			this.kind = kind;
		}

		/**
		 * Tests a [[PseudoState]] to determine if it is a history [[PseudoState]].
		 * History [[PseudoState]]s are of kind: [[ShallowHistory]] or [[DeepHistory]].
		 */
		public isHistory(): boolean {
			return this.kind === PseudoStateKind.DeepHistory || this.kind === PseudoStateKind.ShallowHistory;
		}

		/**
		 * Tests a [[PseudoState]] to determine if it is an initial [[PseudoState]].
		 * Initial [[PseudoState]]s are of kind: [[Initial]], [[ShallowHistory]], or [[DeepHistory]].
		 */
		public isInitial(): boolean {
			return this.kind === PseudoStateKind.Initial || this.isHistory();
		}

		/**
		 * Accepts an instance of a [[Visitor]] and calls the [[visitPseudoState]] method on it.
		 * @param {Visitor<TArg1>} visitor The [[Visitor]] instance.
		 * @param {TArg1} arg1 An optional argument to pass into the [[Visitor]].
		 * @param {any} arg2 An optional argument to pass into the [[Visitor]].
		 * @param {any} arg3 An optional argument to pass into the [[Visitor]].
		 */
		public accept<TArg1>(visitor: Visitor<TArg1>, arg1?: TArg1, arg2?: any, arg3?: any): any {
			return visitor.visitPseudoState(this, arg1, arg2, arg3);
		}
	}

	/**
	 * An element within a state machine model that represents an invariant condition within the life of the state machine instance.
	 *
	 * States are one of the fundamental building blocks of the state machine model.
	 * Behavior can be defined for both state entry and state exit.
	 *
	 * State extends the Vertex class and inherits its public interface.
	 */
	export class State extends Vertex {
		// user defined behavior (via exit method) to execute when exiting a state.
		/*internal*/ exitBehavior = new Array<Action>();

		// user defined behavior (via entry method) to execute when entering a state.
		/*internal*/ entryBehavior = new Array<Action>();

		/**
		 * The set of regions under this state.
		 */
		public regions = new Array<Region>();

		/**
		 * Creates a new instance of the State class.
		 * @param {string} name The name of the state.
		 * @param {Region | State} parent The parent state that owns the state.
		 */
		public constructor(name: string, parent: Region | State) {
			super(name, parent);
		}

		/**
		 * Returns the default region for the state.
		 * Note, this will create the default region if it does not already exist.
		 */
		public defaultRegion(): Region {
			return this.regions.reduce((result, region) => region.name === Region.defaultName ? region : result, undefined) || new Region(Region.defaultName, this);
		}

		/**
		 * Tests the state to see if it is a final state;
		 * a final state is one that has no outbound transitions.
		 */
		public isFinal(): boolean {
			return this.outgoing.length === 0;
		}

		/**
		 * Tests the state to see if it is a simple state;
		 * a simple state is one that has no child regions.
		 */
		public isSimple(): boolean {
			return this.regions.length === 0;
		}

		/**
		 * Tests the state to see if it is a composite state;
		 * a composite state is one that has one or more child regions.
		 */
		public isComposite(): boolean {
			return this.regions.length > 0;
		}

		/**
		 * Tests the state to see if it is an orthogonal state;
		 * an orthogonal state is one that has two or more child regions.
		 */
		public isOrthogonal(): boolean {
			return this.regions.length > 1;
		}

		/**
		 * Removes the state from the state machine model
		 */
		public remove() {
			for (let region of this.regions) {
				region.remove();
			}

			super.remove();
		}

		/**
		 * Adds behavior to a state that is executed each time the state is exited.
		 * @param {Action} exitAction The action to add to the state's exit behavior.
		 */
		public exit(exitAction: Action) {
			this.exitBehavior.push(exitAction);

			this.getRoot().clean = false;

			return this;
		}

		/**
		 * Adds behavior to a state that is executed each time the state is entered.
		 * @param {Action} entryAction The action to add to the state's entry behavior.
		 */
		public entry(entryAction: Action) {
			this.entryBehavior.push(entryAction);

			this.getRoot().clean = false;

			return this;
		}

		/**
		 * Accepts an instance of a visitor and calls the visitState method on it.
		 * @param TArg1 The type of the first optional parameter.
		 * @param {Visitor<TArg1>} visitor The visitor instance.
		 * @param {TArg1} arg1 An optional argument to pass into the visitor.
		 * @param {any} arg2 An optional argument to pass into the visitor.
		 * @param {any} arg3 An optional argument to pass into the visitor.
		 */
		public accept<TArg1>(visitor: Visitor<TArg1>, arg1?: TArg1, arg2?: any, arg3?: any): any {
			return visitor.visitState(this, arg1, arg2, arg3);
		}
	}

	/**
	 * A [[State]] within a [[StateMachine]] model that represents completion of the life of the containing [[Region]] for the state machine instance.
	 *
	 * @note A [[FinalState]] cannot have outbound transitions.
	 */
	export class FinalState extends State {
		/**
		 * Creates a new instance of the [[FinalState]] class.
		 * @param {string} name The name of the [[FinalState]].
		 * @param {Region | State} parent The parent [[Element]] that owns the [[FinalState]].
		 */
		public constructor(name: string, parent: Region | State) {
			super(name, parent);
		}

		/**
		 * Accepts an instance of a [[Visitor]] and calls the [[visitFinalState]] method on it.
		 * @param TArg1 The type of the first optional parameter.
		 * @param {Visitor<TArg1>} visitor The [[Visitor]] instance.
		 * @param {TArg1} arg1 An optional argument to pass into the [[Visitor]].
		 * @param {any} arg2 An optional argument to pass into the [[Visitor]].
		 * @param {any} arg3 An optional argument to pass into the [[Visitor]].
		 */
		public accept<TArg1>(visitor: Visitor<TArg1>, arg1?: TArg1, arg2?: any, arg3?: any): any {
			return visitor.visitFinalState(this, arg1, arg2, arg3);
		}
	}

	/**
	 * An element within a state machine model that represents the root of the state machine model.
	 *
	 * StateMachine extends the State class and inherits its public interface.
	 */
	export class StateMachine extends State {
		// flag used to indicate that the state machine model has has structural changes and therefore requires initialising.
		/*internal*/ clean = false;

		// the behavior required to initialise state machine instances; created when initialising the state machine model.
		/*internal*/ onInitialise: Array<Action>;

		/**
		 * Creates a new instance of the StateMachine class.
		 * @param {string} name The name of the state machine.
		 */
		public constructor(name: string) {
			super(name, undefined);
		}

		/**
		 * Returns the root element within the state machine model.
		 * Note that if this state machine is embeded within another state machine, the ultimate root element will be returned.
		 */
		public getRoot(): StateMachine {
			return this.region ? this.region.getRoot() : this;
		}

		/**
		 * Accepts an instance of a visitor and calls the visitStateMachine method on it.
		 * @param TArg1 The type of the first optional parameter.
		 * @param {Visitor<TArg1>} visitor The visitor instance.
		 * @param {TArg1} arg1 An optional argument to pass into the visitor.
		 * @param {any} arg2 An optional argument to pass into the visitor.
		 * @param {any} arg3 An optional argument to pass into the visitor.
		 */
		public accept<TArg1>(visitor: Visitor<TArg1>, arg1?: TArg1, arg2?: any, arg3?: any): any {
			return visitor.visitStateMachine(this, arg1, arg2, arg3);
		}
	}

	/**
	 * A transition between vertices (states or pseudo states) that may be traversed in response to a message.
	 *
	 * Transitions come in a variety of types:
	 * internal transitions respond to messages but do not cause a state transition, they only have behavior;
	 * local transitions are contained within a single region therefore the source vertex is exited, the transition traversed, and the target state entered;
	 * external transitions are more complex in nature as they cross region boundaries, all elements up to but not not including the common ancestor are exited and entered.
	 *
	 * Entering a composite state will cause the entry of the child regions within the composite state; this in turn may trigger more transitions.
	 */
	export class Transition {
		// the default guard condition for pseudo states
		/*internal*/ static TrueGuard = () => { return true; };

		// used as the guard condition for else tranitions
		/*internal*/ static FalseGuard = () => { return false; };

		// guard condition for this transition.
		/*internal*/ guard: (message?: any, instance?: IInstance) => boolean;

		// user defined behavior (via effect) executed when traversing this transition.
		/*internal*/ transitionBehavior = new Array<Action>();

		// the collected actions to perform when traversing the transition (includes exiting states, traversal, and state entry)
		/*internal*/ onTraverse: Array<Action>;

		/**
		 * The source of the transition.
		 */
		public /*readonly*/ source: Vertex;

		/**
		 * The target of the transition.
		 */
		public /*readonly*/ target: Vertex;

		/**
		 * The kind of the transition which determines its behavior.
		 */
		public /*readonly*/ kind: TransitionKind;

		/**
		 * Creates a new instance of the Transition class.
		 * @param {Vertex} source The source of the transition.
		 * @param {Vertex} source The target of the transition; this is an optional parameter, omitting it will create an Internal transition.
		 * @param {TransitionKind} kind The kind the transition; use this to set Local or External (the default if omitted) transition semantics.
		 */
		public constructor(source: Vertex, target?: Vertex, kind: TransitionKind = TransitionKind.External) {
			this.source = source;
			this.target = target;
			this.kind = target ? kind : TransitionKind.Internal;

			this.guard = source instanceof PseudoState ? Transition.TrueGuard : (message => message === this.source);

			this.source.outgoing.push(this);

			if (this.target) {
				this.target.incoming.push(this);
			}

			this.source.getRoot().clean = false;
		}

		/**
		 * Turns a transition into an else transition.
		 *
		 * Else transitions can be used at `Junction` or `Choice` pseudo states if no other transition guards evaluate true, an Else transition if present will be traversed.
		 */
		public else() {
			this.guard = Transition.FalseGuard;

			return this;
		}

		/**
		 * Defines the guard condition for the transition.
		 * @param {Guard} guard The guard condition that must evaluate true for the transition to be traversed.
		 */
		public when(guard: (message?: any, instance?: IInstance) => boolean) {
			this.guard = guard;

			return this;
		}

		/**
		 * Add behavior to a transition.
		 * @param {Action} transitionAction The action to add to the transitions traversal behavior.
		 */
		public effect(transitionAction: Action) {
			this.transitionBehavior.push(transitionAction);

			this.source.getRoot().clean = false;

			return this;
		}

		/**
		 * Removes the transition from the state machine model
		 */
		public remove() {
			this.source.outgoing.splice(this.source.outgoing.indexOf(this), 1);

			if (this.target) {
				this.target.incoming.splice(this.target.incoming.indexOf(this), 1);
			}

			console.log(`remove ${this}`);

			this.source.getRoot().clean = false;
		}

		/**
		 * Accepts an instance of a visitor and calls the visitTransition method on it.
		 * @param TArg1 The type of the first optional parameter.
		 * @param {Visitor<TArg1>} visitor The visitor instance.
		 * @param {TArg1} arg1 An optional argument to pass into the visitor.
		 * @param {any} arg2 An optional argument to pass into the visitor.
		 * @param {any} arg3 An optional argument to pass into the visitor.
		 */
		public accept<TArg1>(visitor: Visitor<TArg1>, arg1?: TArg1, arg2?: any, arg3?: any): any {
			return visitor.visitTransition(this, arg1, arg2, arg3);
		}

		/**
		 * Returns a the transition name.
		 */
		public toString(): string {
			return `[ ${this.target ? (this.source + " -> " + this.target) : this.source}]`;
		}
	}

	/**
	 * Default working implementation of a state machine instance class.
	 *
	 * Implements the `IInstance` interface.
	 * It is possible to create other custom instance classes to manage state machine state in other ways (e.g. as serialisable JSON); just implement the same members and methods as this class.
	 */
	export class StateMachineInstance implements IInstance {
		private last: any = [];

		/**
		 * The name of the state machine instance.
		 */
		public /*readonly*/ name: string;

		/**
		 * Indicates that the state manchine instance reached was terminated by reaching a Terminate pseudo state.
		 */
		public isTerminated: boolean = false;

		/**
		 * Creates a new instance of the state machine instance class.
		 * @param {string} name The optional name of the state machine instance.
		 */
		public constructor(name: string = "unnamed") {
			this.name = name;
		}

		// Updates the last known state for a given region.
		/*internal*/ setCurrent(region: Region, state: State): void {
			this.last[region.qualifiedName] = state;
		}

		// Returns the last known state for a given region.
		public getCurrent(region: Region): State {
			return this.last[region.qualifiedName];
		}

		/**
		 * Returns the name of the state machine instance.
		 */
		public toString(): string {
			return this.name;
		}
	}

	/**
	 * Implementation of a visitor pattern.
	 * @param TArg1 The type of the first optional parameter in the visit methods.
	 */
	export abstract class Visitor<TArg1> {
		/**
		 * Visits an element within a state machine model.
		 * @param {Element} element the element being visited.
		 * @param {TArg1} arg1 An optional parameter passed into the accept method.
		 * @param {any} arg2 An optional parameter passed into the accept method.
		 * @param {any} arg3 An optional parameter passed into the accept method.
		 */
		public visitElement(element: Element, arg1?: TArg1, arg2?: any, arg3?: any): any {
		}

		/**
		 * Visits a region within a state machine model.
		 * @param {Region} region The region being visited.
		 * @param {TArg1} arg1 An optional parameter passed into the accept method.
		 * @param {any} arg2 An optional parameter passed into the accept method.
		 * @param {any} arg3 An optional parameter passed into the accept method.
		 */
		public visitRegion(region: Region, arg1?: TArg1, arg2?: any, arg3?: any): any {
			const result = this.visitElement(region, arg1, arg2, arg3);

			for (let vertex of region.vertices) {
				vertex.accept(this, arg1, arg2, arg3);
			}

			return result;
		}

		/**
		 * Visits a vertex within a state machine model.
		 * @param {Vertex} vertex The vertex being visited.
		 * @param {TArg1} arg1 An optional parameter passed into the accept method.
		 * @param {any} arg2 An optional parameter passed into the accept method.
		 * @param {any} arg3 An optional parameter passed into the accept method.
		 */
		public visitVertex(vertex: Vertex, arg1?: TArg1, arg2?: any, arg3?: any): any {
			const result = this.visitElement(vertex, arg1, arg2, arg3);

			for (let transition of vertex.outgoing) {
				transition.accept(this, arg1, arg2, arg3);
			}

			return result;
		}

		/**
		 * @param {PseudoState} pseudoState The pseudo state being visited.
		 * @param {TArg1} arg1 An optional parameter passed into the accept method.
		 * @param {any} arg2 An optional parameter passed into the accept method.
		 * @param {any} arg3 An optional parameter passed into the accept method.
		 */
		public visitPseudoState(pseudoState: PseudoState, arg1?: TArg1, arg2?: any, arg3?: any): any {
			return this.visitVertex(pseudoState, arg1, arg2, arg3);
		}

		/**
		 * Visits a state within a state machine model.
		 * @param {State} state The state being visited.
		 * @param {TArg1} arg1 An optional parameter passed into the accept method.
		 * @param {any} arg2 An optional parameter passed into the accept method.
		 * @param {any} arg3 An optional parameter passed into the accept method.
		 */
		public visitState(state: State, arg1?: TArg1, arg2?: any, arg3?: any): any {
			const result = this.visitVertex(state, arg1, arg2, arg3);

			for (let region of state.regions) {
				region.accept(this, arg1, arg2, arg3);
			}

			return result;
		}

		/**
		 * Visits a final state within a state machine model.
		 * @param {FinalState} finalState The final state being visited.
		 * @param {TArg1} arg1 An optional parameter passed into the accept method.
		 * @param {any} arg2 An optional parameter passed into the accept method.
		 * @param {any} arg3 An optional parameter passed into the accept method.
		 */
		public visitFinalState(finalState: FinalState, arg1?: TArg1, arg2?: any, arg3?: any): any {
			return this.visitState(finalState, arg1, arg2, arg3);
		}

		/**
		 * Visits a state machine within a state machine model.
		 * @param {StateMachine} state machine The state machine being visited.
		 * @param {TArg1} arg1 An optional parameter passed into the accept method.
		 * @param {any} arg2 An optional parameter passed into the accept method.
		 * @param {any} arg3 An optional parameter passed into the accept method.
		 */
		public visitStateMachine(model: StateMachine, arg1?: TArg1, arg2?: any, arg3?: any): any {
			return this.visitState(model, arg1, arg2, arg3);
		}

		/**
		 * Visits a transition within a state machine model.
		 * @param {Transition} transition The transition being visited.
		 * @param {TArg1} arg1 An optional parameter passed into the accept method.
		 * @param {any} arg2 An optional parameter passed into the accept method.
		 * @param {any} arg3 An optional parameter passed into the accept method.
		 */
		public visitTransition(transition: Transition, arg1?: TArg1, arg2?: any, arg3?: any): any {
		}
	}

	/**
	 * Function prototype for the callbacks of state transition behavior (includes [[State]] entry and exit behavior).
	 * @param message The message that caused the state transition.
	 * @param instance The state machine instance.
	 * @param deepHistory True if [[PseudoStateKind.DeepHistory]] semantics are in play.
	 */
	export interface Action {
		(message?: any, instance?: IInstance, deepHistory?: boolean): any;
	}

	/**
	 * The methods that state.js may use from a console implementation. Create objects that ahdere to this interface for custom logging, warnings and error handling.
	 */
	export interface IConsole {
		/**
		 * Outputs a log message.
		 * @param {any} message The object to log.
		 */
		log(message?: any, ...optionalParams: any[]): void;

		/**
		 * Outputs a warnnig warning.
		 * @param {any} message The object to log.
		 */
		warn(message?: any, ...optionalParams: any[]): void;

		/**
		 * Outputs an error message.
		 * @param {any} message The object to log.
		 */
		error(message?: any, ...optionalParams: any[]): void;
	}

	/**
	 * Interface for the state machine instance; an object used as each instance of a state machine (as the classes in this library describe a state machine model). The contents of objects that implement this interface represents the Ac
	 */
	export interface IInstance {
		/**
		 * Indicates that the state machine instance has reached a terminate pseudo state and therfore will no longer evaluate messages.
		 */
		isTerminated: boolean;

		/**
		 * Updates the last known state for a given region.
		 * @param {Region} region The region to update the last known state for.
		 * @param {State} state The last known state for the given region.
		 */
		setCurrent(region: Region, state: State): void;

		/**
		 * Returns the last known state for a given region.
		 * @param {Region} region The region to update the last known state for.
		 */
		getCurrent(region: Region): State;
	}

	/**
	 * Determines if a vertex is currently active; that it has been entered but not yet exited.
	 * @param {Vertex} vertex The vertex to test.
	 * @param {IInstance} instance The instance of the state machine model.
	 */
	export function isActive(vertex: Vertex, instance: IInstance): boolean {
		return vertex.region ? (isActive(vertex.region.state, instance) && (instance.getCurrent(vertex.region) === vertex)) : true;
	}

	/**
	 * Tests an element within a state machine instance to see if its lifecycle is complete.
	 * @param {Region | State} element The element to test.
	 * @param {IInstance} instance The instance of the state machine model to test for completeness.
	 */
	export function isComplete(element: Region | State, instance: IInstance): boolean {
		if (element instanceof Region) {
			return instance.getCurrent(element).isFinal();
		} else {
			return element.regions.every(region => { return isComplete(region, instance); });
		}
	}

	// the default method used to produce a random number; defaulting to simplified implementation seen in Mozilla Math.random() page; may be overriden for testing
	const defaultRandom = function (max: number): number {
		return Math.floor(Math.random() * max);
	};

	/**
	 * concatenates arrays containing transition behavior.
	 * @private
	 */
	function push(to: Array<Action>, ...actions: Array<Array<Action>>): void {
		for (let set of actions) {
			for (let action of set) {
				to.push(action);
			}
		}
	}

	// invokes transition behavior
	function invoke(to: Array<Action>, message?: any, instance?: IInstance, deepHistory: boolean = false) {
		for (let action of to) {
			action(message, instance, deepHistory);
		}
	}

	/**
	 * The function used for to generate random numbers; may be overriden for testing purposes.
	 */
	export let random: (max: number) => number = defaultRandom;

	/**
	 * Initialises a state machine and/or state machine model.
	 *
	 * Passing just the state machine model will initialise the model, passing the model and instance will initialse the instance and if necessary, the model.
	 * @param {StateMachine} model The state machine model. If autoInitialiseModel is true (or no instance is specified) and the model has changed, the model will be initialised.
	 * @param {IInstance} instance The optional state machine instance to initialise.
	 * @param {boolean} autoInitialiseModel Defaulting to true, this will cause the model to be initialised prior to initialising the instance if the model has changed.
	 */
	export function initialise(model: StateMachine, instance?: IInstance, autoInitialiseModel: boolean = true): void {
		if (instance) {
			// initialise the state machine model if necessary
			if (autoInitialiseModel && model.clean === false) {
				initialise(model);
			}

			// log as required
			console.log(`initialise ${instance}`);

			// enter the state machine instance for the first time
			invoke(model.onInitialise, undefined, instance);
		} else {
			// log as required
			console.log(`initialise ${model.name}`);

			// initialise the state machine model
			model.accept(new InitialiseElements(), false);
			model.clean = true;
		}
	}

	/**
	 * Passes a message to a state machine for evaluation; messages trigger state transitions.
	 * @param {StateMachine} model The state machine model. If autoInitialiseModel is true (or no instance is specified) and the model has changed, the model will be initialised.
	 * @param {IInstance} instance The instance of the state machine model to evaluate the message against.
	 * @param {boolean} autoInitialiseModel Defaulting to true, this will cause the model to be initialised prior to initialising the instance if the model has changed.
	 */
	export function evaluate(model: StateMachine, instance: IInstance, message: any, autoInitialiseModel: boolean = true): boolean {
		// initialise the state machine model if necessary
		// TODO: take this out
		if (autoInitialiseModel && model.clean === false) {
			initialise(model);
		}

		// log as required
		console.log(`${instance} evaluate ${message}`);

		// terminated state machine instances will not evaluate messages
		if (instance.isTerminated) {
			return false;
		}

		return evaluateState(model, instance, message);
	}

	/**
	 * Evaluates messages against a state, executing transitions as appropriate.
	 * @private
	 */
	function evaluateState(state: State, instance: IInstance, message: any): boolean {
		let result = false;

		// delegate to child regions first if a non-continuation
		if (message !== state) {
			state.regions.every(region => {
				if (evaluateState(instance.getCurrent(region), instance, message)) {
					result = true;

					return isActive(state, instance); // NOTE: this just controls the every loop; also isActive is a litte costly so using sparingly
				}

				return true; // NOTE: this just controls the every loop
			});
		}
		// if a transition occured in a child region, check for completions
		if (result) {
			if ((message !== state) && isComplete(state, instance)) {
				evaluateState(state, instance, state);
			}
		} else {
			// otherwise look for a transition from this state
			const transitions = state.outgoing.filter(transition => transition.guard(message, instance));

			if (transitions.length === 1) {
				// execute if a single transition was found
				result = traverse(transitions[0], instance, message);
			} else if (transitions.length > 1) {
				// error if multiple transitions evaluated true
				console.error(`${state}: multiple outbound transitions evaluated true for message ${message}`);
			}
		}

		return result;
	}

	/**
	 * Traverses a transition.
	 * @private
	 */
	function traverse(transition: Transition, instance: IInstance, message?: any): boolean {
		let tran = transition;
		let target = tran.target;
		let onTraverse = new Array<Action>();

		push(onTraverse, tran.onTraverse);

		// process static conditional branches - build up all the transition behavior prior to executing
		while (target && target instanceof PseudoState && target.kind === PseudoStateKind.Junction) {
			// proceed to the next transition
			tran = selectTransition(target as PseudoState, instance, message);
			target = tran.target;

			// concatenate behavior before and after junctions
			push(onTraverse, tran.onTraverse);
		}

		// execute the transition behavior
		invoke(onTraverse, message, instance);

		if (target) {
			// process dynamic conditional branches as required
			if (target instanceof PseudoState && target.kind === PseudoStateKind.Choice) {
				traverse(selectTransition(target, instance, message), instance, message);
			}

			// test for completion transitions
			else if (target instanceof State && isComplete(target, instance)) {
				evaluateState(target, instance, target);
			}
		}

		return true;
	}

	/**
	 * Select next leg of composite transitions after choice and junction pseudo states.
	 * @private
	 */
	function selectTransition(pseudoState: PseudoState, instance: IInstance, message: any): Transition {
		const results = pseudoState.outgoing.filter(transition => transition.guard(message, instance));

		if (pseudoState.kind === PseudoStateKind.Choice) {
			return results.length !== 0 ? results[random(results.length)] : findElse(pseudoState);
		} else {
			if (results.length > 1) {
				console.error(`Multiple outbound transition guards returned true at ${pseudoState} for ${message}`);
			} else {
				return results[0] || findElse(pseudoState);
			}
		}
	}

	/**
	 * Look for else transitions from a junction or choice.
	 * @private
	 */
	function findElse(pseudoState: PseudoState): Transition {
		return pseudoState.outgoing.filter(transition => transition.guard === Transition.FalseGuard)[0];
	}

	/**
	 * Interface used to temporarily hold element behavior during [[StateMachine]] initialisation.
	 * @private
	 */
	class ElementBehavior {
		/**
		 * The [[Action]]s to execute when leaving an [[Element]] during a state transition (including and cascaded [[Action]]s).
		 */
		leave = new Array<Action>();

		/**
		 * The initial [[Action]]s to execute when entering an [[Element]] during a state transition
		 */
		beginEnter = new Array<Action>();

		/**
		 * The follow-on [[Action]]s to execute when entering an [[Element]] during a state transition (including and cascaded [[Action]]s).
		 */
		endEnter = new Array<Action>();

		/**
		 * The full set of [[Action]]s to execute when entering an [[Element]] during a state transition (including and cascaded [[Action]]s).
		 */
		enter(): Array<Action> {
			let result = new Array<Action>();

			push(result, this.beginEnter, this.endEnter);

			return result;
		}
	}

	/**
	 * Initialises the transitions within a [[StateMachine]].
	 * @private
	 */
	class InitialiseTransitions extends Visitor<(element: Element) => ElementBehavior> {
		visitTransition(transition: Transition, behavior: (element: Element) => ElementBehavior) {
			// reset transition behavior
			transition.onTraverse = new Array<Action>();

			// initialise transition behavior based on transition kind
			switch (transition.kind) {
				case TransitionKind.Internal:
					this.visitInternalTransition(transition, behavior);
					break;

				case TransitionKind.Local:
					this.visitLocalTransition(transition, behavior);
					break;

				case TransitionKind.External:
					this.visitExternalTransition(transition, behavior);
					break;
			}
		}

		// initialise internal transitions: these do not leave the source state
		visitInternalTransition(transition: Transition, behavior: (element: Element) => ElementBehavior) {
			// perform the transition behavior
			push(transition.onTraverse, transition.transitionBehavior);

			// add a test for completion
			if (internalTransitionsTriggerCompletion) {
				transition.onTraverse.push((message, instance) => {
					const state = transition.source as State; // NOTE: internal transitions source

					// fire a completion transition
					if (isComplete(state, instance)) {
						evaluateState(state, instance, state);
					}
				});
			}
		}

		// initialise transitions within the same region
		visitLocalTransition(transition: Transition, behavior: (element: Element) => ElementBehavior) {
			transition.onTraverse.push((message, instance) => {
				const targetAncestors = transition.target.ancestry();
				let i = 0;

				// find the first inactive element in the target ancestry
				while (isActive(targetAncestors[i], instance)) { ++i; }

				// exit the active sibling
				invoke(behavior(instance.getCurrent(targetAncestors[i].region)).leave, message, instance);

				// perform the transition action;
				invoke(transition.transitionBehavior, message, instance);

				// enter the target ancestry
				while (i < targetAncestors.length) {
					this.cascadeElementEntry(transition, behavior, targetAncestors[i++], targetAncestors[i], behavior => invoke(behavior, message, instance));
				}

				// trigger cascade
				invoke(behavior(transition.target).endEnter, message, instance);
			});
		}

		// initialise external transitions: these are abritarily complex
		visitExternalTransition(transition: Transition, behavior: (element: Element) => ElementBehavior) {
			const sourceAncestors = transition.source.ancestry(),
				targetAncestors = transition.target.ancestry();
			let i = Math.min(sourceAncestors.length, targetAncestors.length) - 1;

			// find the index of the first uncommon ancestor (or for external transitions, the source)
			while (sourceAncestors[i - 1] !== targetAncestors[i - 1]) { --i; }

			// leave source ancestry as required and perform the transition effect
			push(transition.onTraverse, behavior(sourceAncestors[i]).leave, transition.transitionBehavior);

			// enter the target ancestry
			while (i < targetAncestors.length) {
				this.cascadeElementEntry(transition, behavior, targetAncestors[i++], targetAncestors[i], behavior => push(transition.onTraverse, behavior));
			}

			// trigger cascade
			push(transition.onTraverse, behavior(transition.target).endEnter);
		}

		cascadeElementEntry(transition: Transition, behavior: (element: Element) => ElementBehavior, element: Vertex, next: Vertex, task: (behavior: Array<Action>) => void) {
			task(behavior(element).beginEnter);

			if (next && element instanceof State) {
				for (let region of element.regions) {
					task(behavior(region).beginEnter);

					if (region !== next.region) {
						task(behavior(region).endEnter);
					}
				}
			}
		}
	}

	/**
	 * Bootstraps all the elements within a state machine model
	 * @private
	 */
	class InitialiseElements extends Visitor<boolean> {
		private behaviors: { [id: string]: ElementBehavior } = {};

		private behavior(element: Element): ElementBehavior {
			return this.behaviors[element.qualifiedName] || (this.behaviors[element.qualifiedName] = new ElementBehavior());
		}

		visitElement(element: Element, deepHistoryAbove: boolean) {
			if (console !== defaultConsole) {
				this.behavior(element).leave.push((message, instance) => console.log(`${instance} enter ${element}`));
				this.behavior(element).beginEnter.push((message, instance) => console.log(`${instance} enter ${element}`));
			}
		}

		visitRegion(region: Region, deepHistoryAbove: boolean) {
			const regionInitial = region.vertices.reduce<PseudoState>((result, vertex) => vertex instanceof PseudoState && vertex.isInitial() ? vertex : result, undefined);

			for (let vertex of region.vertices) {
				vertex.accept(this, deepHistoryAbove || (regionInitial && regionInitial.kind === PseudoStateKind.DeepHistory));
			}

			// leave the curent active child state when exiting the region
			this.behavior(region).leave.push((message, instance) => invoke(this.behavior(instance.getCurrent(region)).leave, message, instance));

			// enter the appropriate child vertex when entering the region
			if (deepHistoryAbove || !regionInitial || regionInitial.isHistory()) { // NOTE: history needs to be determined at runtime
				this.behavior(region).endEnter.push((message, instance, deepHistory) => invoke((this.behavior((deepHistory || regionInitial.isHistory()) ? instance.getCurrent(region) || regionInitial : regionInitial)).enter(), message, instance, deepHistory || regionInitial.kind === PseudoStateKind.DeepHistory));
			} else {
				push(this.behavior(region).endEnter, this.behavior(regionInitial).enter());
			}

			this.visitElement(region, deepHistoryAbove);
		}

		visitPseudoState(pseudoState: PseudoState, deepHistoryAbove: boolean) {
			super.visitPseudoState(pseudoState, deepHistoryAbove);

			// evaluate comppletion transitions once vertex entry is complete
			if (pseudoState.isInitial()) {
				this.behavior(pseudoState).endEnter.push((message, instance, deepHistory) => {
					if (instance.getCurrent(pseudoState.region)) {
						invoke(this.behavior(pseudoState).leave, message, instance);

						invoke(this.behavior(instance.getCurrent(pseudoState.region)).enter(), message, instance, deepHistory || pseudoState.kind === PseudoStateKind.DeepHistory);
					} else {
						traverse(pseudoState.outgoing[0], instance);
					}
				});
			} else if (pseudoState.kind === PseudoStateKind.Terminate) {
				// terminate the state machine instance upon transition to a terminate pseudo state
				this.behavior(pseudoState).beginEnter.push((message, instance) => instance.isTerminated = true);
			}
		}

		visitState(state: State, deepHistoryAbove: boolean) {
			// NOTE: manually iterate over the child regions to control the sequence of behavior
			for (let region of state.regions) {
				region.accept(this, deepHistoryAbove);

				push(this.behavior(state).leave, this.behavior(region).leave);
				push(this.behavior(state).endEnter, this.behavior(region).enter());
			}

			this.visitVertex(state, deepHistoryAbove);

			// add the user defined behavior when entering and exiting states
			push(this.behavior(state).leave, state.exitBehavior);
			push(this.behavior(state).beginEnter, state.entryBehavior);

			// update the parent regions current state
			this.behavior(state).beginEnter.push((message, instance) => {
				if (state.region) {
					instance.setCurrent(state.region, state);
				}
			});
		}

		visitStateMachine(stateMachine: StateMachine, deepHistoryAbove: boolean) {
			super.visitStateMachine(stateMachine, deepHistoryAbove);

			// initiaise all the transitions once all the elements have been initialised
			stateMachine.accept(new InitialiseTransitions(), (element: Element) => this.behavior(element));

			// define the behavior for initialising a state machine instance
			stateMachine.onInitialise = this.behavior(stateMachine).enter();
		}
	}

	// the default implemention of the console
	const defaultConsole = {
		log(message?: any, ...optionalParams: any[]): void { },
		warn(message?: any, ...optionalParams: any[]): void { },
		error(message?: any, ...optionalParams: any[]): void { throw message; }
	};

	/**
	 * The object used for log, warning and error messages
	 */
	export let console: IConsole = defaultConsole;

	/**
	 * Flag to trigger internal transitions to trigger completion events for state they are in
	 */
	export let internalTransitionsTriggerCompletion: Boolean = false;

	/**
	 * Validates a state machine model for correctness (see the constraints defined within the UML Superstructure specification).
	 * @param {StateMachine} model The state machine model to validate.
	 */
	export function validate(model: StateMachine): void {
		model.accept(new Validator());
	}

	class Validator extends Visitor<string> {
		public visitPseudoState(pseudoState: PseudoState): any {
			super.visitPseudoState(pseudoState);

			if (pseudoState.kind === PseudoStateKind.Choice || pseudoState.kind === PseudoStateKind.Junction) {
				// [7] In a complete statemachine, a junction vertex must have at least one incoming and one outgoing transition.
				// [8] In a complete statemachine, a choice vertex must have at least one incoming and one outgoing transition.
				if (pseudoState.outgoing.length === 0) {
					console.error(`${pseudoState}: ${pseudoState.kind} pseudo states must have at least one outgoing transition.`);
				}

				// choice and junction pseudo state can have at most one else transition
				if (pseudoState.outgoing.filter((transition: Transition) => { return transition.guard === Transition.FalseGuard; }).length > 1) {
					console.error(`${pseudoState}: ${pseudoState.kind} pseudo states cannot have more than one Else transitions.`);
				}
			} else {
				// non choice/junction pseudo state may not have else transitions
				if (pseudoState.outgoing.filter((transition: Transition) => { return transition.guard === Transition.FalseGuard; }).length !== 0) {
					console.error(`${pseudoState}: ${pseudoState.kind} pseudo states cannot have Else transitions.`);
				}

				if (pseudoState.isInitial()) {
					if (pseudoState.outgoing.length > 1) {
						// [1] An initial vertex can have at most one outgoing transition.
						// [2] History vertices can have at most one outgoing transition.
						console.error(`${pseudoState}: initial pseudo states must have no more than one outgoing transition.`);
					} else if (pseudoState.outgoing.length === 1) {
						// [9] The outgoing transition from an initial vertex may have a behavior, but not a trigger or guard.
						if (pseudoState.outgoing[0].guard !== Transition.TrueGuard) {
							console.error(`${pseudoState}: initial pseudo states cannot have a guard condition.`);
						}
					}
				}
			}
		}

		public visitRegion(region: Region): any {
			super.visitRegion(region);

			// [1] A region can have at most one initial vertex.
			// [2] A region can have at most one deep history vertex.
			// [3] A region can have at most one shallow history vertex.
			let initial = 0, deepHistory = 0, shallowHistory = 0;

			for (let vertex of region.vertices) {
				if (vertex instanceof PseudoState) {
					if (vertex.kind === PseudoStateKind.Initial) {
						initial++;
					} else if (vertex.kind === PseudoStateKind.DeepHistory) {
						deepHistory++;
					} else if (vertex.kind === PseudoStateKind.ShallowHistory) {
						shallowHistory++;
					}
				}
			}

			if (initial > 1) {
				console.error(`${region}: regions may have at most one initial pseudo state.`);
			}

			if (deepHistory > 1) {
				console.error(`${region}: regions may have at most one deep history pseudo state.`);
			}

			if (shallowHistory > 1) {
				console.error(`${region}: regions may have at most one shallow history pseudo state.`);
			}
		}
		public visitState(state: State): any {
			super.visitState(state);

			if (state.regions.filter(region => region.name === Region.defaultName).length > 1) {
				console.error(`${state}: a state cannot have more than one region named ${Region.defaultName}`);
			}
		}

		public visitFinalState(finalState: FinalState): any {
			super.visitFinalState(finalState);

			// [1] A final state cannot have any outgoing transitions.
			if (finalState.outgoing.length !== 0) {
				console.error(`${finalState}: final states must not have outgoing transitions.`);
			}

			// [2] A final state cannot have regions.
			if (finalState.regions.length !== 0) {
				console.error(`${finalState}: final states must not have child regions.`);
			}

			// [4] A final state has no entry behavior.
			if (finalState.entryBehavior.length > 0) {
				console.warn(`${finalState}: final states may not have entry behavior.`);
			}

			// [5] A final state has no exit behavior.
			if (finalState.exitBehavior.length > 0) {
				console.warn(`${finalState}: final states may not have exit behavior.`);
			}
		}

		public visitTransition(transition: Transition): any {
			super.visitTransition(transition);

			// Local transition target vertices must be a child of the source vertex
			if (transition.kind === TransitionKind.Local) {
				if (transition.target.ancestry().indexOf(transition.source) === -1) {
					console.error(`${transition}: local transition target vertices must be a child of the source composite sate.`);
				}
			}
		}
	}
}
